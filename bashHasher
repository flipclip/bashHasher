#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

. $DIR/CONFIG

#Below Lies Madness. Do not change anything below.

declare -A skip
for i in "$@"
do
case $i in
    --skipnicehash)
    skip[nicehash]="1"
    shift
    ;;
    --skipyaamp)
    skip[yaamp]="1"
    shift
    ;;
    --skipx11)
    skip[x11]="1"
    shift
    ;;
    --skipx13)
    skip[x13]="1"
    shift
    ;;
    --skipx15)
    skip[x15]="1"
    shift
    ;;
    --skipnist5)
    skip[nist5]="1"
    shift
    ;;
    --skipx14)
    skip[x14]="1"
    shift
    ;;
    --skipneoscrypt)
    skip[neoscrypt]="1"
    shift
    ;;
    --skiplyra2)
    skip[lyra2]="1"
    shift
    ;;
    --skipquark)
    skip[quark]="1"
    shift
    ;;
    --skipfresh)
    skip[fresh]="1"
    shift
    ;;
    --skipqubit)
    skip[qubit]="1"
    shift
    ;;
    --skipkeccak)
    skip[keccak]="1"
    shift
    ;;
    --skipwhirlpoolx)
    skip[whirlpoolx]="1"
    shift
    ;;
    --skipskein)
    skip[skein]="1"
    shift
    ;;
    --skipgroestl)
    skip[groestl]="1"
    shift
    ;;
    --skipblake)
    skip[blake]="1"
    shift
    ;;
    --debug)
    logging="1"
    shift
    ;;
    *)
            # unknown option
    ;;
esac
done

log_time=$(date +"%m-%d-%y %T")
largest=-10000
declare -A hash_calls=( [x11]="$hash_x11" [x13]="$hash_x13" [x15]="$hash_x15" [nist5]="$hash_nist5" [neoscrypt]="$hash_neoscrypt" [lyra2]="$hash_lyra2" [quark]="$hash_quark" [x14]="$hash_x14" [fresh]="$hash_fresh" [qubit]="$hash_qubit" [keccak]="$hash_keccak" [whirlpoolx]="$hash_whirlpoolx" [skein]="$hash_skein" [groestl]="$hash_groestl" [blake]="$hash_blake")
declare -A watt_calls=( [x11]="$watt_x11" [x13]="$watt_x13" [x15]="$watt_x15" [nist5]="$watt_nist5" [neoscrypt]="$watt_neoscrypt" [lyra2]="$watt_lyra2" [quark]="$watt_quark" [x14]="$watt_x14" [fresh]="$watt_fresh" [qubit]="$watt_qubit" [keccak]="$watt_keccak" [whirlpoolx]="$watt_whirlpoolx"  [skein]="$watt_skein" [groestl]="$watt_groestl" [blake]="$watt_blake")
declare -A intensity_calls=( [x11]="$inten_x11" [x13]="$inten_x13" [x15]="$inten_x15" [nist5]="$inten_nist5" [neoscrypt]="$inten_neoscrypt" [lyra2]="$inten_lyra2" [quark]="$inten_quark" [x14]="$inten_x14" [fresh]="$inten_fresh" [qubit]="$inten_qubit" [keccak]="$inten_keccak" [whirlpoolx]="$inten_whirlpoolx" [skein]="$inten_skein" [groestl]="$inten_groestl" [blake]="$inten_blake")
declare -A gputhreads_calls=( [x11]="$gputhreads_x11" [x13]="$gputhreads_x13" [x15]="$gputhreads_x15" [nist5]="$gputhreads_nist5" [neoscrypt]="$gputhreads_neoscrypt" [lyra2]="$gputhreads_lyra2" [quark]="$gputhreads_quark" [x14]="$gputhreads_x14" [fresh]="$gputhreads_fresh" [qubit]="$gputhreads_qubit" [keccak]="$gputhreads_keccak" [whirlpoolx]="$gputhreads_whirlpoolx" [skein]="$gputhreads_skein" [groestl]="$gputhreads_groestl" [blake]="$gputhreads_blake")
bpi_api_addr="https://api.coindesk.com/v1/bpi/currentprice/$currency.json"
nicehash_api_addr="https://www.nicehash.com/api?method=stats.global.current"
yaamp_api_addr="http://yaamp.com/api/status"
miner_path="$miner_path/$miner_name"

algo_array=(x11 x13 x15 nist5 neoscrypt lyra2 quark x14 fresh qubit whirlpoolx keccak skein groestl blake)
service_calls=(bpi nicehash yaamp)
declare -A service_api_calls=( [nicehashx11]="3" [nicehashx13]="4" [nicehashkeccak]="5" [nicehashx15]="6" [nicehashnist5]="7" [nicehashneoscrypt]="8" [nicehashlyra2]="9" [nicehashwhirlpoolx]="10" [nicehashqubit]="11" [nicehashquark]="12" [yaampx11]="x11" [yaampx13]="x13" [yaampx15]="x15" [yaampneoscrypt]="neoscrypt" [yaamplyra2]="lyra2" [yaampquark]="quark" [yaampx14]="x14" [yaampfresh]="fresh" [yaampqubit]="qubit" [yaampskein]="skein" [yaampgroestl]="groestl" [yaampblake]="blake")
declare -A service_url=( [nicehash]=$nicehash_url [yaamp]=$yaamp_url )
declare -A service_pay_rate=( [nicehash]=1000000 [yaamp]=1000 )
declare -A service_port=( [nicehashx11]=3336 [nicehashx13]=3337 [nicehashkeccak]=3338 [nicehashx15]=3339 [nicehashnist5]=3340 [nicehashneoscrypt]=3341 [nicehashlyra2]=3342 [nicehashwhirlpoolx]=3343 [nicehashqubit]=3344 [nicehashquark]=3345 [yaampx11]=3533 [yaampx13]=3633 [yaampx15]=3733 [yaampnist5]=3833 [yaampx14]=3933 [yaampneoscrypt]=4233 [yaamplyra2]=4433 [yaampquark]=4033 [yaampfresh]=4133 [yaampqubit]=4733 [yaampskein]=4933 [yaampgroestl]=5033 [yaampblake]=4533)
declare -A service_api_addr=( [bpi]=$bpi_api_addr [nicehash]=$nicehash_api_addr [yaamp]=$yaamp_api_addr )
declare -A service_api_fetched
service_api_len=${#service_api_addr[@]}
algo_len=${#algo_array[@]}
service_len=${#service_calls[@]}
array_len=${#algo_array[@]}

read_api () {
telnet_data=$1
telnet_data=${telnet_data##*\]\'.}
telnet_data="${telnet_data:1}"
IFS=$";=|" read -a cc_sum <<< "$telnet_data"
unset IFS
unset assoc_sum
declare -Ag assoc_sum
cc_lng=$(( ${#cc_sum[@]} / 2 ))
i=0
cc_sum_name=0
cc_sum_val=1
while [ "$i" -lt "$cc_lng" ]
do
assoc_sum[${cc_sum[$cc_sum_name]}]=${cc_sum[$cc_sum_val]}
cc_sum_name=$(( $cc_sum_name + 2 ))
cc_sum_val=$(( cc_sum_val + 2 ))
(( i++ ))
done
}

find_pid=$(pidof $miner_name)
if [[ $? -eq 1 ]]
then
if [ -f $script_path/using ] ; then rm $script_path/using ; fi
fresh_start=
elif [ ! -z "${miner_IP+1}" ]
then
declare -Ag assoc_sum
telnet_sum="$({ echo 'summary'; sleep .5; } | telnet $miner_IP $miner_port 2>1 )"
read_api "$telnet_sum"
algo_in_use=${assoc_sum[ALGO]}
hash_in_use=${assoc_sum[KHS]}
telnet_pool="$({ echo 'pool'; sleep .5; } | telnet $miner_IP $miner_port 2>1 )"
read_api "$telnet_pool"
service_url=${assoc_sum[URL]}
shorter=${service_url:14}
shorten=`expr index "$shorter" :`
(( shorten = shorten - 1 ))
service_in_use="${shorter:0:$shorten}"
service_in_use="${service_in_use%.*}"
service_in_use="${service_in_use##*.}"
if [ "$service_in_use" == "westhash" ] ; then service_in_use="nicehash" ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo in Use via API: $algo_in_use" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Hash in Use via API: $hash_in_use" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service in Use via API: $service_in_use" >> $script_path/log ; fi
else
IFS=: read -a using_array <<< "$(cat "$script_path"/using)"
unset IFS
service_in_use=${using_array[0]}
algo_in_use=${using_array[1]}
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service in Use via Using File: $service_in_use" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo in Use via Using File: $algo_in_use" >> $script_path/log ; fi
fi

overclock () {
IFS=, read -a gfx_sum <<< "${gfx_calls[$1]}"
unset IFS
for (( gfx_i=0 ; gfx_i < ${#gfx_sum[@]} ; gfx_i++ ));
do
$nv_path/nvidia-settings -a "[gpu:$gfx_i]/gpugraphicsclockoffset[1]=${gfx_sum[$gfx_i]}"
done
IFS=, read -a mem_sum <<< "${mem_calls[$1]}"
unset IFS
for (( mem_i=0 ; mem_i < ${#mem_sum[@]} ; mem_i++ ));
do
$nv_path/nvidia-settings -a "[gpu:$mem_i]/gpumemorytransferrateoffset[1]=${mem_sum[$mem_i]}"
done
}

miner_kill () {
if [ ! -z "${find_pid}" ] ; then kill -9 $find_pid ; fi
service="$3"
IFS=, read -a mining_sum <<< "${mining_addr}"
unset IFS
if [ ${#mining_sum[@]} -gt 1 ] && [ "$service" == "yaamp" ] ; then user=${mining_sum[1]} ; else user=${mining_sum[0]}; fi
pwd="$ny_pwd"
algo="$1"
url="$2"
if [ "$service" == "nicehash" ] ; then url="stratum+tcp://$algo.$2"; else url="stratum+tcp://$2"; fi
if [ ! "${intensity_calls[$algo]}" = "0" ] ; then optional_inten="--intensity=${intensity_calls[$algo]}"; else optional_inten=""; fi
if [ ! "${gputhreads_calls[$algo]}" = "1" ] ; then optional_gpu="-g ${gputhreads_calls[$algo]}"; else optional_gpu=""; fi
if [ -z ${miner_IP+x} ]; then optional_api="" ; else optional_api="--api-bind $miner_IP:$miner_port"; fi
if [ -z ${other_cmd+x} ]; then optional_cmd="" ; else optional_cmd="$other_cmd"; fi
if [ -n "$nv_path" ]; then overclock "$algo" ; fi
/usr/bin/screen -m -d -S mining "$miner_path" $optional_inten $optional_gpu --algo="$algo" --url="$url" --user="$user" --pass="$pwd" $optional_api $optional_cmd
if [ ! -z "${logging+1}" ] ; then echo "$log_time $1 $3 $user $pwd ${intensity_calls[$algo]}" >> $script_path/log ; fi
}

for (( api=0 ; api < $service_api_len ; api++ ));
do
if test "${skip[${service_calls[$api]}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service ${service_calls[$api]} skipped." >> $script_path/log ; fi
continue
fi
fetch=$(curl "${service_api_addr[${service_calls[$api]}]}")
status=$?
if [ "$status" -eq "0" ]
then
short=${fetch:0:2}
if [ "$short" != "{\"" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Error with ${service_calls[$api]} json feed." >> $script_path/log ; fi
skip[${service_calls[$api]}]="1"
else
service_api_fetched[${service_calls[$api]}]="$fetch"
fi
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time Curl has failed with exit $status." >> $script_path/log ; fi
skip[${service_calls[$api]}]="1"
fi
done

if [ "${skip[bpi]}" == "1" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time BPI Fetch Failed.  Using default Bitcoin value: $btc_default" >> $script_path/log ; fi
btc_rate_clean="$btc_default"
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time BPI Fetch: ${service_api_fetched[bpi]}" >> $script_path/log ; fi
btc_rate=$($json_script_path/JSON.sh <<< "${service_api_fetched[bpi]}" | egrep '\["bpi",\"'$currency'\","rate"\]' | cut -d ' ' -f 2 | awk -F\" '{print $(NF-1)}')
btc_rate_clean=${btc_rate/,}
fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time NiceHash Fetch: ${service_api_fetched[nicehash]}" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Yaamp Fetch: ${service_api_fetched[yaamp]}" >> $script_path/log ; fi

compute_return () {
service_test="$1"
i="$2"
if [ "$service_test" == "nicehash" ]
then
pay=$( $json_script_path/JSON.sh <<< "${service_api_fetched[${service_test}]}" | egrep "\[\"result\",\"stats\",${service_api_calls[$service_test${algo_array[$i]}]},\"price\"\]" | cut -d ' ' -f 2 | awk -F\" '{print $(NF-1)}' )
if [ -z "$pay" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time NiceHash does not use algo ${algo_array[$i]}." >> $script_path/log ; fi
net="0"
echo "$net"
continue
fi
elif [ "$service_test" == "yaamp" ]
then
coin_test=$( $json_script_path/JSON.sh <<< "${service_api_fetched[${service_test}]}" | egrep "\[\"${service_api_calls[$service_test${algo_array[$i]}]}\",\"coins\"\]" | cut -d ' ' -f 1 | awk -F\"\] '{print $(NF)}' )
if [ -z "$coin_test" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Yaamp does not use algo ${algo_array[$i]}." >> $script_path/log ; fi
net="0"
echo "$net"
continue
elif [ "$coin_test" -eq "0" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Yaamp has zero coins using ${algo_array[$i]}. Skipping." >> $script_path/log ; fi
net="0"
echo "$net"
continue
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time Yaamp has $coin_test coins using ${algo_array[$i]}." >> $script_path/log ; fi
pay=$( $json_script_path/JSON.sh <<< "${service_api_fetched[${service_test}]}" | egrep "\[\"${service_api_calls[$service_test${algo_array[$i]}]}\",\"estimate_current\"\]" | cut -d ' ' -f 1 | awk -F\"\] '{print $(NF)}' )
fi
fi
gross=$(bc <<< "scale=9;$pay/${service_pay_rate[$service_test]}*${hash_calls[${algo_array[$i]}]}")
if [ ! -z "${logging+1}" ] ; then echo "$log_time $service_test : ${algo_array[$i]} : Future Pay (gross) = $gross"  >> $script_path/log ; fi
mining_cost=$(bc <<< "scale=9;${watt_calls[${algo_array[$i]}]}/1000*$kWh_cost*24")
btc_need=$(bc <<< "scale=9;$mining_cost/$btc_rate_clean")
net=$(bc <<< "scale=9;$gross-$btc_need")
echo "$net"
}

#services loop for price comparison
for (( j=1 ; j < ${service_len} ; j++ ));
do
service_test=${service_calls[$j]}
if test "${skip[${service_test}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service ${service_test} skipped." >> $script_path/log ; fi
continue
fi
#price comparison loop
for (( i=0 ; i < ${algo_len} ; i++ ));
do
if test "${skip[${algo_array[$i]}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo ${algo_array[$i]} skipped." >> $script_path/log ; fi
continue
fi
mining_return=$(compute_return "$service_test" "$i")
if [ ! -z "${logging+1}" ]
then 
if [ "$mining_return" != "0" ] ; then echo "$log_time $service_test : ${algo_array[$i]} : Future Pay (net) = $mining_return"  >> $script_path/log ; fi
fi
if (( $(bc <<< "$mining_return > $largest") == 1 )) ; then largest=$mining_return ; port_use=${service_port[$service_test${algo_array[$i]}]} ; algo_use=${algo_array[$i]} ; service_use="$service_test" ; url=${service_url[$service_test]} ; fi
#end price comparison loop
done

#end services loop for price comparison
done

#was ccminer running, if true then test percent change between current pay and what pay might change to
if [ -z "${fresh_start+1}" ]
then
if [ "$algo_use" != "$algo_in_use" ] || [ "$service_use" != "$service_in_use" ]
then
if test "${skip[${service_in_use}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service ${service_in_use} in use but error retrieving new api data." >> $script_path/log ; fi
miner_kill "$algo_use" "$url$port_use" "$service_use"
elif test "${skip[${algo_in_use}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo ${algo_in_use} is in use but algo should be skipped." >> $script_path/log ; fi
miner_kill "$algo_use" "$url$port_use" "$service_use"
else
for (( m = 0; m < ${#algo_array[@]}; m++ )); do
   if [ "${algo_array[$m]}" = "${algo_in_use}" ]; then
       i=$m;
   fi
done
current_mining_return=$(compute_return "$service_in_use" "$i")
changing=0
if [ ! -z "${logging+1}" ] ; then echo "$log_time Largest is: $largest" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Current Mining Return is: $current_mining_return" >> $script_path/log ; fi
if (( $(bc <<< "$current_mining_return > 0") == 1 )) ; then changing=$(bc <<< "scale=9;$largest/$current_mining_return") ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Change is: $changing" >> $script_path/log ; fi
percent_change=$(bc <<< "scale=9;($changing-1)*100")
if [ ! -z "${logging+1}" ] ; then echo "$log_time Percent change is: $percent_change" >> $script_path/log ; fi
#percent change greater then user value
if (( $(bc <<< "$percent_change > 0") == 1 && $(bc <<< "$percent_change > $use_difference") == 1 ))
then
miner_kill "$algo_use" "$url$port_use" "$service_use"
if [ ! -z "${logging+1}" ] ; then echo "$log_time Change greater? $percent_change Changing to: $service_use $algo_use" >> $script_path/log ; fi
#percent change negative
elif (( $(bc <<< "$percent_change < 0") == 1 ))
then
miner_kill "$algo_use" "$url$port_use" "$service_use"
if [ ! -z "${logging+1}" ] ; then echo "$log_time Change negative? $percent_change Changing to: $service_use $algo_use" >> $script_path/log ; fi
#percent change not greater then user value
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time No change because percent change: $percent_change" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Was going to use service: $service_use and algo: $algo_use" >> $script_path/log ; fi
service_use=$service_in_use
algo_use=$algo_in_use
largest=$current_mining_return
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service and Algo changed back? Use service: $service_use and algo: $algo_use" >> $script_path/log ; fi
fi
fi
fi
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time $miner_name not running. Starting..." >> $script_path/log ; fi
miner_kill "$algo_use" "$url$port_use" "$service_use"
fi
echo "$service_use:$algo_use:$(date +%s)" > $script_path/using
if [ ! -z "${logging+1}" ] ; then echo "$log_time $service_use:$algo_use:$port_use:$largest" >> $script_path/log ; fi

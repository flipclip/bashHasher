#!/bin/bash

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

. $DIR/CONFIG

config_test="1.7"
if [ "$config_ver" != "$config_test" ]
then
echo "CONFIG file version: $config_ver bashHasher is looking for $config_test.  Please update accordingly. Exiting"
exit 1
fi

#Below Lies Madness. Do not change anything below.

declare -A skip
for i in "$@"
do
case $i in
    --skipnicehash)
    skip[nicehash]="1"
    shift
    ;;
    --skipzpool)
    skip[zpool]="1"
    shift
    ;;
    --skiphashpower)
    skip[hashpower]="1"
    shift
    ;;
    --skipblake2s)
    skip[blake2s]="1"
    shift
    ;;
    --skipblakecoin)
    skip[blakecoin]="1"
    shift
    ;;
    --skipc11)
    skip[c11]="1"
    shift
    ;;
    --skipdecred)
    skip[decred]="1"
    shift
    ;;
    --skipgroestl)
    skip[groestl]="1"
    shift
    ;;
    --skipkeccak)
    skip[keccak]="1"
    shift
    ;;
    --skiplyra2v2)
    skip[lyra2v2]="1"
    shift
    ;;
    --skipmyr-gr)
    skip[myr-gr]="1"
    shift
    ;;
    --skipneoscrypt)
    skip[neoscrypt]="1"
    shift
    ;;
    --skipnist5)
    skip[nist5]="1"
    shift
    ;;
    --skipquark)
    skip[quark]="1"
    shift
    ;;
    --skipqubit)
    skip[qubit]="1"
    shift
    ;;
    --skipsib)
    skip[sib]="1"
    shift
    ;;
    --skipskein)
    skip[skein]="1"
    shift
    ;;
    --skipx11evo)
    skip[x11evo]="1"
    shift
    ;;
    --skipx11)
    skip[x11]="1"
    shift
    ;;
    --skipx13)
    skip[x13]="1"
    shift
    ;;
    --skipx14)
    skip[x14]="1"
    shift
    ;;   
    --skipx15)
    skip[x15]="1"
    shift
    ;;
    --skipx17)
    skip[x17]="1"
    shift
    ;;
    --debug)
    logging="1"
    shift
    ;;
    --json)
    json_output="y"
    shift
    ;;
    *)
            # unknown option
    ;;
esac
done

log_time=$(date +"%m-%d-%y %T")
largest=-10000
declare -A hash_calls=( [blake2s]="$hash_blake2s" [blakecoin]="$hash_blakecoin" [c11]="$hash_c11" [decred]="$hash_decred" [groestl]="$hash_groestl" [keccak]="$hash_keccak" [lyra2v2]="$hash_lyra2v2" [myr-gr]="$hash_myr-gr" [neoscrypt]="$hash_neoscrypt" [nist5]="$hash_nist5" [quark]="$hash_quark" [qubit]="$hash_qubit" [sib]="$hash_sib" [skein]="$hash_skein" [x11evo]="$hash_x11evo" [x11]="$hash_x11" [x13]="$hash_x13" [x14]="$hash_x14" [x15]="$hash_x15" [x17]="$hash_x17")
declare -A watt_calls=( [blake2s]="$watt_blake2s" [blakecoin]="$watt_blakecoin" [c11]="$watt_c11" [decred]="$watt_decred" [groestl]="$watt_groestl" [keccak]="$watt_keccak" [lyra2v2]="$watt_lyra2v2" [myr-gr]="$watt_myr-gr" [neoscrypt]="$watt_neoscrypt" [nist5]="$watt_nist5" [quark]="$watt_quark" [qubit]="$watt_qubit" [sib]="$watt_sib" [skein]="$watt_skein" [x11evo]="$watt_x11evo" [x11]="$watt_x11" [x13]="$watt_x13" [x14]="$watt_x14" [x15]="$watt_x15" [x17]="$watt_x17")
declare -A intensity_calls=( [blake2s]="$inten_blake2s" [blakecoin]="$inten_blakecoin" [c11]="$inten_c11" [decred]="$inten_decred" [groestl]="$inten_groestl" [keccak]="$inten_keccak" [lyra2v2]="$inten_lyra2v2" [myr-gr]="$inten_myr-gr" [neoscrypt]="$inten_neoscrypt" [nist5]="$inten_nist5" [quark]="$inten_quark" [qubit]="$inten_qubit" [sib]="$inten_sib" [skein]="$inten_skein" [x11evo]="$inten_x11evo" [x11]="$inten_x11" [x13]="$inten_x13" [x14]="$inten_x14" [x15]="$inten_x15" [x17]="$inten_x17")
declare -A gfx_calls=( [blake2s]="$gfx_blake2s" [blakecoin]="$gfx_blakecoin" [c11]="$gfx_c11" [decred]="$gfx_decred" [groestl]="$gfx_groestl" [keccak]="$gfx_keccak" [lyra2v2]="$gfx_lyra2v2" [myr-gr]="$gfx_myr-gr" [neoscrypt]="$gfx_neoscrypt" [nist5]="$gfx_nist5" [quark]="$gfx_quark" [qubit]="$gfx_qubit" [sib]="$gfx_sib" [skein]="$gfx_skein" [x11evo]="$gfx_x11evo" [x11]="$gfx_x11" [x13]="$gfx_x13" [x14]="$gfx_x14" [x15]="$gfx_x15" [x17]="$gfx_x17")
declare -A mem_calls=( [blake2s]="$mem_blake2s" [blakecoin]="$mem_blakecoin" [c11]="$mem_c11" [decred]="$mem_decred" [groestl]="$mem_groestl" [keccak]="$mem_keccak" [lyra2v2]="$mem_lyra2v2" [myr-gr]="$mem_myr-gr" [neoscrypt]="$mem_neoscrypt" [nist5]="$mem_nist5" [quark]="$mem_quark" [qubit]="$mem_qubit" [sib]="$mem_sib" [skein]="$mem_skein" [x11evo]="$mem_x11evo" [x11]="$mem_x11" [x13]="$mem_x13" [x14]="$mem_x14" [x15]="$mem_x15" [x17]="$mem_x17")
bpi_api_addr="https://api.coindesk.com/v1/bpi/currentprice/$currency.json"
nicehash_api_addr="https://www.nicehash.com/api?method=stats.global.current"
zpool_api_addr="http://www.zpool.ca/api/status"
hashpower_api_addr="http://hashpower.co/api/status"
miner_path="$miner_path/$miner_name"

algo_array=(blake2s blakecoin c11 decred groestl keccak lyra2v2 myr-gr neoscrypt nist5 quark qubit sib skein x11evo x11 x13 x14 x15 x17)
service_calls=(bpi nicehash zpool hashpower)
declare -A service_api_calls=( [nicehashdecred]="21" [nicehashkeccak]="5" [nicehashlyra2v2]="14" [nicehashneoscrypt]="8" [nicehashqubit]="11" [nicehashquark]="12" [nicehashx11]="3" [nicehashx13]="4" [nicehashx15]="6" [zpoolblake2s]="blake2s" [zpoolblakecoin]="blakecoin" [zpoolc11]="c11" [zpooldecred]="decred" [zpoolgroestl]="groestl" [zpoollyra2v2]="lyra2v2" [zpoolmyr-gr]="myr-gr" [zpoolneoscrypt]="neoscrypt" [zpoolnist5]="nist5" [zpoolquark]="quark" [zpoolqubit]="qubit" [zpoolsib]="sib" [zpoolskein]="skein" [zpoolx11evo]="x11evo" [zpoolx11]="x11" [zpoolx13]="x13" [zpoolx14]="x14" [zpoolx15]="x15" [zpoolx17]="x17" [hashpowerx11]="x11" [hashpowerneoscrypt]="neoscrypt" [hashpowerquark]="quark" [hashpowerqubit]="qubit" [hashpowerlyra2v2]="lyra2v2")
declare -A service_url=( [nicehash]=$nicehash_url [zpool]=$zpool_url [hashpower]=$hashpower_url)
declare -A service_pay_rate=( [nicehash]=1000000 [zpool]=1000 [hashpower]=1000)
declare -A service_port=( [nicehashdecred]=3354 [nicehashkeccak]=3338 [nicehashlyra2v2]=3347 [nicehashneoscrypt]=3341 [nicehashqubit]=3344 [nicehashquark]=3345 [nicehashx11]=3336 [nicehashx13]=3337 [nicehashx15]=3339 [zpoolblake2s]=5766 [zpoolblakecoin]=5743 [zpooldecred]=5744 [zpoolc11]=3573 [zpoolgroestl]=5333 [zpoollyra2v2]=4533 [zpoolmyr-gr]=5433 [zpoolneoscrypt]=4233 [zpoolnist5]=3833 [zpoolquark]=4033 [zpoolqubit]=4733 [zpoolsib]=5033 [zpoolskein]=4933 [zpoolx11evo]=3553 [zpoolx11]=3533 [zpoolx13]=3633 [zpoolx14]=3933 [zpoolx15]=3733 [zpoolx17]=3737 [hashpowerx11]=3533 [hashpowerneoscrypt]=4233 [hashpowerquark]=4033 [hashpowerqubit]=4733 [hashpowerlyra2v2]=5433)
declare -A service_api_addr=( [bpi]=$bpi_api_addr [nicehash]=$nicehash_api_addr [zpool]=$zpool_api_addr [hashpower]=$hashpower_api_addr )
declare -A service_api_fetched
service_api_len=${#service_api_addr[@]}
algo_len=${#algo_array[@]}
service_len=${#service_calls[@]}
array_len=${#algo_array[@]}

read_api () {
telnet_data=$1
telnet_data=${telnet_data##*\]\'.}
telnet_data="${telnet_data:1}"
IFS=$";=|" read -a cc_sum <<< "$telnet_data"
unset IFS
unset assoc_sum
declare -Ag assoc_sum
cc_lng=$(( ${#cc_sum[@]} / 2 ))
i=0
cc_sum_name=0
cc_sum_val=1
while [ "$i" -lt "$cc_lng" ]
do
assoc_sum[${cc_sum[$cc_sum_name]}]=${cc_sum[$cc_sum_val]}
cc_sum_name=$(( $cc_sum_name + 2 ))
cc_sum_val=$(( cc_sum_val + 2 ))
(( i++ ))
done
}

shorten_pool_url () {
full_url="$1"
shorter=${full_url:14}
shorten=`expr index "$shorter" :`
(( shorten = shorten - 1 ))
shorten_service="${shorter:0:$shorten}"
shorten_service="${shorten_service%.*}"
shorten_service="${shorten_service##*.}"
echo "$shorten_service"
}

compute_cost () {
i="$1"
computed_cost=$(bc <<< "scale=9;${watt_calls[${algo_array[$i]}]}/1000*$kWh_cost*24")
echo "$computed_cost"
}

for (( i=0 ; i < ${algo_len} ; i++ ));
do
if test "${skip[${algo_array[$i]}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Power cost for algo ${algo_array[$i]} skipped." >> $script_path/log ; fi
continue
fi
mining_cost=$(compute_cost "$i")
power_cost[${i}]=${mining_cost}
done

find_pid=$(pidof $miner_name)
if [[ $? -eq 1 ]]
then
if [ -f $script_path/using ] ; then rm $script_path/using ; fi
fresh_start=
elif [ ! -z "${miner_IP+1}" ]
then
declare -Ag assoc_sum
telnet_sum="$({ echo 'summary'; sleep .5; } | telnet $miner_IP $miner_port 2>1 )"
read_api "$telnet_sum"
algo_in_use=${assoc_sum[ALGO]}
hash_in_use=${assoc_sum[KHS]}
diff_in_use=${assoc_sum[DIFF]}
accepted=${assoc_sum[ACC]}
rejected=${assoc_sum[REJ]}
telnet_pool="$({ echo 'pool'; sleep .5; } | telnet $miner_IP $miner_port 2>1 )"
read_api "$telnet_pool"
service_url=${assoc_sum[URL]}
service_in_use=$(shorten_pool_url "$service_url")
if [ "$service_in_use" == "westhash" ] ; then service_in_use="nicehash" ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo in Use via API: $algo_in_use" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Hash in Use via API: $hash_in_use" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service in Use via API: $service_in_use" >> $script_path/log ; fi
else
IFS=: read -a using_array <<< "$(cat "$script_path"/using)"
unset IFS
service_in_use=${using_array[0]}
algo_in_use=${using_array[1]}
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service in Use via Using File: $service_in_use" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo in Use via Using File: $algo_in_use" >> $script_path/log ; fi
fi

miner_kill () {
if [ ! -z "${find_pid}" ] ; then kill -9 $find_pid ; fi
service="$3"
IFS=, read -a mining_sum <<< "${mining_addr}"
unset IFS
if [[ ${#mining_sum[@]} -gt 1  && ("$service" == "hashpower") ]] ; then user=${mining_sum[1]} ; else user=${mining_sum[0]}; fi
pwd="$ny_pwd"
algo="$1"
url="$2"
if [ "$service" == "nicehash" ] ; then url="stratum+tcp://$algo.$2"; else url="stratum+tcp://$2"; fi
if [ "$service" == "nicehash" ] && [ "$algo" == "lyra2v2" ]; then url="stratum+tcp://lyra2rev2.$2"; fi
if [ ! "${intensity_calls[$algo]}" = "0" ] ; then optional_inten="--intensity=${intensity_calls[$algo]}"; else optional_inten=""; fi
if [ -z ${miner_IP+x} ]; then optional_api="" ; else optional_api="--api-bind $miner_IP:$miner_port"; fi
if [ -z ${other_cmd+x} ]; then optional_cmd="" ; else optional_cmd="$other_cmd"; fi
if [ -n "$nv_path" ]; then overclock "$algo" ; fi
$screen_path/screen -m -d -S mining "$miner_path" $optional_inten $optional_gpu --algo="$algo" --url="$url" --user="$user" --pass="$pwd" $optional_api $optional_cmd
if [ ! -z "${logging+1}" ] ; then echo "$log_time $1 $3 $user $pwd ${intensity_calls[$algo]}" >> $script_path/log ; fi
}

for (( api=0 ; api < $service_api_len ; api++ ));
do
if test "${skip[${service_calls[$api]}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service ${service_calls[$api]} skipped." >> $script_path/log ; fi
continue
fi
fetch=$($curl_path/curl --connect-time $curl_time "${service_api_addr[${service_calls[$api]}]}")
status=$?
if [ "$status" -eq "0" ]
then
short=${fetch:0:2}
if [ "$short" != "{\"" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Error with ${service_calls[$api]} json feed." >> $script_path/log ; fi
skip[${service_calls[$api]}]="1"
else
service_api_fetched[${service_calls[$api]}]="$fetch"
fi
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time Curl has failed with exit $status." >> $script_path/log ; fi
skip[${service_calls[$api]}]="1"
fi
done

if [ "${skip[bpi]}" == "1" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time BPI Fetch Failed.  Using default Bitcoin value: $btc_default" >> $script_path/log ; fi
btc_rate_clean="$btc_default"
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time BPI Fetch: ${service_api_fetched[bpi]}" >> $script_path/log ; fi
btc_rate=$($script_path/JSON.sh/JSON.sh -x '\"bpi\",\"USD\",\"rate_float\"' -var <<< "${service_api_fetched[bpi]}")
btc_rate_clean=${btc_rate/,}
fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time NiceHash Fetch: ${service_api_fetched[nicehash]}" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Zpool Fetch: ${service_api_fetched[zpool]}" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time hashpower Fetch: ${service_api_fetched[hashpower]}" >> $script_path/log ; fi

compute_return () {
service_test="$1"
i="$2"
if [ "$service_test" == "nicehash" ]
then
pay=$($script_path/JSON.sh/JSON.sh -x "\"result\",\"stats\",${service_api_calls[$service_test${algo_array[$i]}]},\"price\"" -var <<< "${service_api_fetched[${service_test}]}")
pay_temp="${pay%\"}"
pay="${pay_temp#\"}"
if [ -z "$pay" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time NiceHash does not use algo ${algo_array[$i]}." >> $script_path/log ; fi
net="-"
echo "$net"
continue
fi
elif [ "$service_test" == "zpool" ] || [ "$service_test" == "hashpower" ]
then
coin_test=$($script_path/JSON.sh/JSON.sh -x "\"${service_api_calls[$service_test${algo_array[$i]}]}\",\"coins\"" -var <<< "${service_api_fetched[${service_test}]}")
if [ -z "$coin_test" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time $service_test does not use algo ${algo_array[$i]}." >> $script_path/log ; fi
net="-"
echo "$net"
continue
elif [ "$coin_test" -eq "0" ]
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time $service_test has zero coins using ${algo_array[$i]}. Skipping." >> $script_path/log ; fi
net="-"
echo "$net"
continue
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time $service_test has $coin_test coins using ${algo_array[$i]}." >> $script_path/log ; fi
pay=$($script_path/JSON.sh/JSON.sh -x "\"${service_api_calls[$service_test${algo_array[$i]}]}\",\"estimate_current\"" -var <<< "${service_api_fetched[${service_test}]}")
if [ "$service_test" == "zpool" ]
then
pay_temp="${pay%\"}"
pay="${pay_temp#\"}"
fi
fi
fi
gross=$(bc <<< "scale=9;$pay/${service_pay_rate[$service_test]}*${hash_calls[${algo_array[$i]}]}")
if [ ! -z "${logging+1}" ] ; then echo "$log_time $service_test : ${algo_array[$i]} : Future Pay (gross) = $gross"  >> $script_path/log ; fi
btc_need=$(bc <<< "scale=9;${power_cost[${i}]}/$btc_rate_clean")
net=$(bc <<< "scale=9;$gross-$btc_need")
echo "$net"
}

#services loop for price comparison
for (( j=1 ; j < ${service_len} ; j++ ));
do
service_test=${service_calls[$j]}
if test "${skip[${service_test}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service ${service_test} skipped." >> $script_path/log ; fi
continue
fi
#price comparison loop
for (( i=0 ; i < ${algo_len} ; i++ ));
do
if test "${skip[${algo_array[$i]}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo ${algo_array[$i]} skipped." >> $script_path/log ; fi
continue
fi
mining_return=$(compute_return "$service_test" "$i")
if [ ! -z "${logging+1}" ]
then 
if [ "$mining_return" != "-" ] ; then echo "$log_time $service_test : ${algo_array[$i]} : Future Pay (net) = $mining_return"  >> $script_path/log ; fi
fi
if [ "$mining_return" != "-" ]
then
if (( $(bc <<< "$mining_return > $largest") == 1 )) ; then largest=$mining_return ; port_use=${service_port[$service_test${algo_array[$i]}]} ; algo_use=${algo_array[$i]} ; service_use="$service_test" ; url=${service_url[$service_test]} ; fi
fi
#end price comparison loop
done

#end services loop for price comparison
done

#was ccminer running, if true then test percent change between current pay and what pay might change to
if [ -z "${fresh_start+1}" ]
then
if [ "$algo_use" != "$algo_in_use" ] || [ "$service_use" != "$service_in_use" ]
then
if test "${skip[${service_in_use}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service ${service_in_use} in use but error retrieving new api data." >> $script_path/log ; fi
miner_kill "$algo_use" "$url$port_use" "$service_use"
elif test "${skip[${algo_in_use}]+1}"
then
if [ ! -z "${logging+1}" ] ; then echo "$log_time Algo ${algo_in_use} is in use but algo should be skipped." >> $script_path/log ; fi
miner_kill "$algo_use" "$url$port_use" "$service_use"
else
for (( m = 0; m < ${#algo_array[@]}; m++ )); do
   if [ "${algo_array[$m]}" = "${algo_in_use}" ]; then
       i=$m;
   fi
done
current_mining_return=$(compute_return "$service_in_use" "$i")
changing=0
if [ ! -z "${logging+1}" ] ; then echo "$log_time Largest is: $largest" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Current Mining Return is: $current_mining_return" >> $script_path/log ; fi
if (( $(bc <<< "$current_mining_return > 0") == 1 )) ; then changing=$(bc <<< "scale=9;$largest/$current_mining_return") ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Change is: $changing" >> $script_path/log ; fi
percent_change=$(bc <<< "scale=9;($changing-1)*100")
if [ ! -z "${logging+1}" ] ; then echo "$log_time Percent change is: $percent_change" >> $script_path/log ; fi
#percent change greater then user value
if (( $(bc <<< "$percent_change > 0") == 1 && $(bc <<< "$percent_change > $use_difference") == 1 ))
then
miner_kill "$algo_use" "$url$port_use" "$service_use"
if [ ! -z "${logging+1}" ] ; then echo "$log_time Change greater? $percent_change Changing to: $service_use $algo_use" >> $script_path/log ; fi
#percent change negative
elif (( $(bc <<< "$percent_change < 0") == 1 ))
then
miner_kill "$algo_use" "$url$port_use" "$service_use"
if [ ! -z "${logging+1}" ] ; then echo "$log_time Change negative? $percent_change Changing to: $service_use $algo_use" >> $script_path/log ; fi
#percent change not greater then user value
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time No change because percent change: $percent_change" >> $script_path/log ; fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time Was going to use service: $service_use and algo: $algo_use" >> $script_path/log ; fi
service_use=$service_in_use
algo_use=$algo_in_use
largest=$current_mining_return
if [ ! -z "${logging+1}" ] ; then echo "$log_time Service and Algo changed back? Use service: $service_use and algo: $algo_use" >> $script_path/log ; fi
fi
fi
fi
else
if [ ! -z "${logging+1}" ] ; then echo "$log_time $miner_name not running. Starting..." >> $script_path/log ; fi
miner_kill "$algo_use" "$url$port_use" "$service_use"
fi
echo "$service_use:$algo_use:$(date +%s)" > $script_path/using
if [ ! -z "${json_output+1}" ]
then
json_time=$(date +%s)
if [ ! -z "${miner_IP+1}" ]
then
echo "{\"mining\":[{\"Time\":\"$json_time\",\"Service\":\"$service_in_use\",\"Algo\":\"$algo_in_use\",\"Current Mining Return\":\"$current_mining_return\",\"Hash Rate\":\"$hash_in_use\",\"Diff\":\"$diff_in_use\",\"Accepted\":\"$accepted\",\"Rejected\":\"$rejected\"}]}" >> $script_path/json 
else
echo "{\"mining\":[{\"Time\":\"$json_time\",\"Service\":\"$service_in_use\",\"Algo\":\"$algo_in_use\",\"Current Mining Return\":\"$current_mining_return\",\"Hash Rate\":\"-\",\"Diff\":\"-\",\"Accepted\":\"-\",\"Rejected\":\"-\"}]}" >> $script_path/json 
fi
fi
if [ ! -z "${logging+1}" ] ; then echo "$log_time $service_use:$algo_use:$port_use:$largest" >> $script_path/log ; fi

